---
# tasks file for roles/connectivity_troubleshooter_validate

- name: Run 'cloud.aws_troubleshooting.connectivity_troubleshooter_validate' role
  block:
    - name: Fail when the IPv4 address of the resource you want to connect is not defined
      ansible.builtin.fail:
        msg: The IPv4 address of the resource you want to connect to must be defined as connectivity_troubleshooter_validate_destination_ip
      when: connectivity_troubleshooter_validate_destination_ip is not defined

    - name: Fail when the port number you want to connect to on the destination resource is not defined
      ansible.builtin.fail:
        msg: The port number you want to connect to on the destination resource must be defined as connectivity_troubleshooter_validate_destination_port
      when: connectivity_troubleshooter_validate_destination_port is not defined

    - name: Fail when the private IPv4 address of the AWS resource in your Amazon VPC you want to test connectivity from is not defined
      ansible.builtin.fail:
        msg: >
          The private IPv4 address of the AWS resource in your Amazon VPC you want to test connectivity from must be defined as
          connectivity_troubleshooter_validate_source_ip
      when: connectivity_troubleshooter_validate_source_ip is not defined

    - name: Fail when 'connectivity_troubleshooter_validate_source_ip' and 'connectivity_troubleshooter_validate_destination_ip' coincide
      ansible.builtin.fail:
        msg: connectivity_troubleshooter_validate_source_ip and connectivity_troubleshooter_validate_destination_ip are same, kindly provide different values
      when: connectivity_troubleshooter_validate_source_ip == connectivity_troubleshooter_validate_destination_ip

    - name: Set 'connectivity_troubleshooter_validate__filter_eni' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_validate__filter_eni: { addresses.private-ip-address: "{{ connectivity_troubleshooter_validate_source_ip }}" }

    - name: Set 'connectivity_troubleshooter_validate__filter_eni' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_validate__filter_eni: >-
          {{ connectivity_troubleshooter_validate__filter_eni | combine({'vpc-id': connectivity_troubleshooter_validate_source_vpc}) }}
      when: connectivity_troubleshooter_validate_source_vpc | default('', true) | trim != ''

    - name: Gather information about source ENI
      amazon.aws.ec2_eni_info:
        filters: "{{ connectivity_troubleshooter_validate__filter_eni }}"
      register: connectivity_troubleshooter_validate__describe_src_eni

    - name: Fail when no network interface found
      ansible.builtin.fail:
        msg: >
          Kindly check the connectivity_troubleshooter_validate_source_ip and connectivity_troubleshooter_validate_source_vpc parameters, no network interface
          found
      when: connectivity_troubleshooter_validate__describe_src_eni['network_interfaces'] | length == 0

    - name: >
        Set 'connectivity_troubleshooter_validate__src_subnet_id', 'connectivity_troubleshooter_validate__src_vpc_id',
        'connectivity_troubleshooter_validate__src_security_groups' and 'connectivity_troubleshooter_validate__src_network_interface' variables
      ansible.builtin.set_fact:
        connectivity_troubleshooter_validate__src_subnet_id: "{{ connectivity_troubleshooter_validate__src_network_interface_info.subnet_id }}"
        connectivity_troubleshooter_validate__src_vpc_id: "{{ connectivity_troubleshooter_validate__src_network_interface_info.vpc_id }}"
        connectivity_troubleshooter_validate__src_security_groups: >-
          {{ connectivity_troubleshooter_validate__src_network_interface_info.groups | map(attribute='group_id') | list }}
        connectivity_troubleshooter_validate__src_network_interface: "{{ connectivity_troubleshooter_validate__src_network_interface_info }}"
      vars:
        connectivity_troubleshooter_validate__src_network_interface_info: "{{ connectivity_troubleshooter_validate__describe_src_eni.network_interfaces.0 }}"

    - name: Gather information about source VPC route table
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          association.subnet-id: "{{ connectivity_troubleshooter_validate__src_subnet_id }}"
      register: connectivity_troubleshooter_validate__src_route_table

    - name: Set 'connectivity_troubleshooter_validate__routes' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_validate__routes: "{{ connectivity_troubleshooter_validate__src_route_table.route_tables.0.routes }}"
      when: connectivity_troubleshooter_validate__src_route_table.route_tables | length > 0

    # if RouteTable is not returned, this indicates association of subnet with main route table
    - name: Gather information about VPC route table using association.main=true
      when: connectivity_troubleshooter_validate__src_route_table.route_tables | length == 0
      block:
        - name: Gather information about VPC route table
          amazon.aws.ec2_vpc_route_table_info:
            filters:
              association.main: "true"
              vpc-id: "{{ connectivity_troubleshooter_validate__src_vpc_id }}"
          register: connectivity_troubleshooter_validate__src_route_table_retry

        - name: Fail when no route table for connectivity_troubleshooter_validate_source_ip is found
          ansible.builtin.fail:
            msg: Could not find route table for connectivity_troubleshooter_validate_source_ip
          when: connectivity_troubleshooter_validate__src_route_table_retry.route_tables | length == 0

        - name: Set 'connectivity_troubleshooter_validate__routes' variable
          ansible.builtin.set_fact:
            connectivity_troubleshooter_validate__routes: "{{ connectivity_troubleshooter_validate__src_route_table_retry.route_tables.0.routes }}"

    - name: Get connection next hop
      cloud.aws_troubleshooting.get_connection_next_hop:
        dst_ip: "{{ connectivity_troubleshooter_validate_destination_ip }}"
        routes: "{{ connectivity_troubleshooter_validate__routes }}"
      register: connectivity_troubleshooter_validate__result_next_hop

    - name: Set 'connectivity_troubleshooter_validate__next_hop' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_validate__next_hop: "{{ connectivity_troubleshooter_validate__result_next_hop.next_hop }}"
